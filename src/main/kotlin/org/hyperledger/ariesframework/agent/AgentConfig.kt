package org.hyperledger.ariesframework.agent

import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable
import org.hyperledger.ariesframework.credentials.models.AutoAcceptCredential
import org.hyperledger.ariesframework.oob.models.HandshakeProtocol
import org.hyperledger.ariesframework.proofs.models.AutoAcceptProof
import org.hyperledger.ariesframework.routing.Routing

@Serializable
enum class MediatorPickupStrategy {
    @SerialName("PickUpV1")
    PickUpV1,

    @SerialName("Implicit")
    Implicit,
}

/**
 * Configuration for the agent.
 * @property walletKey RAW key generated by [Agent.generateWalletKey]. This is the key used to encrypt the wallet and should be stored securely.
 * @property genesisPath File path to the genesis file for the indy ledger.
 * @property walletId The wallet id to identify the wallet in an App.
 * @property poolName The pool name to identify the pool in an App.
 * @property mediatorConnectionsInvite The invite url for the mediator.
 * @property mediatorPickupStrategy The strategy for picking up message from the mediator.
 * @property label The label for the agent.
 * @property autoAcceptConnections Whether to automatically accept connections. Default is true.
 * @property mediatorPollingInterval The interval in seconds to poll the mediator for messages. Default is 10 seconds.
 * @property mediatorEmptyReturnRetryInterval The interval in seconds to pickup messages if the outbound transport's response is empty. Default is 3 seconds.
 * @property connectionImageUrl The image url to use for the connection.
 * @property autoAcceptCredential Whether to automatically accept credentials. Default is [AutoAcceptCredential.Always].
 * @property autoAcceptProof Whether to automatically accept proofs. Default is [AutoAcceptProof.Always].
 * @property ignoreRevocationCheck Whether to ignore revocation checks when creating a presentation. Default is false. For testing.
 * @property useLedgerService Whether to use the ledger service. Default is true.
 * @property useLegacyDidSovPrefix Whether to use the legacy did sov prefix. Default is true.
 * @property publicDidSeed The seed to use for the public did. The public did is used to register items on the ledger. For testing.
 * @property agentEndpoints The agent endpoints to use for testing.
 * @property useReturnRoute Whether to use the transport-return-route. Default is true.
 * @property preferredHandshakeProtocol The preferred handshake protocol to use. Default is [HandshakeProtocol.Connections].
 * @property endpoints The endpoints of the agent. Read only.
 */
@Serializable
data class AgentConfig(
    var walletKey: String,
    var genesisPath: String,
    var walletId: String = "AFKDefaultWallet",
    var poolName: String = "AFKDefaultPool",
    var mediatorConnectionsInvite: String? = null,
    var mediatorPickupStrategy: MediatorPickupStrategy = MediatorPickupStrategy.PickUpV1,
    var label: String = "AriesFrameworkKotlinAgent",
    var autoAcceptConnections: Boolean = true,
    var mediatorPollingInterval: Long = 10,
    var mediatorEmptyReturnRetryInterval: Long = 3,
    var connectionImageUrl: String? = null,
    var autoAcceptCredential: AutoAcceptCredential = AutoAcceptCredential.Always,
    var autoAcceptProof: AutoAcceptProof = AutoAcceptProof.Always,
    var ignoreRevocationCheck: Boolean = false,
    var useLedgerService: Boolean = true,
    var useLegacyDidSovPrefix: Boolean = true,
    var publicDidSeed: String? = null,
    var agentEndpoints: List<String>? = null,
    var useReturnRoute: Boolean = true,
    var preferredHandshakeProtocol: HandshakeProtocol = HandshakeProtocol.Connections,
) {
    val endpoints: List<String>
        get() = agentEndpoints ?: listOf(Routing.DID_COMM_TRANSPORT_QUEUE)
}
